# T2 Foundation Gemstone Project [t3gemstone.org]
# SPDX-License-Identifier: Apache-2.0

version: '3'

dotenv: ['.env']

vars:
  BUILD_DIR: '{{ .ROOT_DIR }}/build'
  DOWNLOAD_DIR: '{{ .BUILD_DIR }}/downloads'
  TOOLCHAINS_DIR: '{{ .BUILD_DIR }}/${DISTRO_BASE}-${DISTRO_SUITE}'
  TI_INSTALL_DIR: '{{ .BUILD_DIR }}/ti'
  URLS:
    map: {
      toolchains: 'https://github.com/t3gemstone/toolchains/releases/latest/download/t3gemstone-toolchains-${DISTRO_BASE}-${DISTRO_SUITE}.tar.gz',
      ti_j722s_rtos_sdk: 'https://dr-download.ti.com/software-development/software-development-kit-sdk/MD-1bSfTnVt5d/10.01.00.04/ti-processor-sdk-rtos-j722s-evm-10_01_00_04.tar.gz',
      ti_j722s_mcusw_sdk: 'https://dr-download.ti.com/software-development/software-development-kit-sdk/MD-1bSfTnVt5d/10.01.00.04/MCUSW_J722S_10.01.00.03.zip',
      ti_sysconfig: 'https://dr-download.ti.com/software-development/ide-configuration-compiler-or-debugger/MD-nsUM6f7Vvb/1.20.0.3587/sysconfig-1.20.0_3587-setup.run',
      ti_cgt_c7000: 'https://dr-download.ti.com/software-development/ide-configuration-compiler-or-debugger/MD-707zYe3Rik/4.1.0.LTS/ti_cgt_c7000_4.1.0.LTS_linux-x64_installer.bin',
      ti_cgt_armllvm: 'https://dr-download.ti.com/software-development/ide-configuration-compiler-or-debugger/MD-ayxs93eZNN/3.2.2.LTS/ti_cgt_armllvm_3.2.2.LTS_linux-x64_installer.bin'
    }

env:
  PROJDIR: '{{ .ROOT_DIR }}'
  PROCESSOR_SDK_PATH: '{{ .TI_INSTALL_DIR }}/ti-processor-sdk-rtos-j722s-evm-10_01_00_04'
  MCU_PLUS_SDK_PATH: "${PROCESSOR_SDK_PATH}/mcu_plus_sdk_j722s_10_01_00_22"
  TOOLS_PATH: '{{ .TI_INSTALL_DIR }}'
  SYSCFG_PATH: '{{ .TI_INSTALL_DIR }}/sysconfig_1.20.0'
  CGT_TI_C7000_PATH: '{{ .TI_INSTALL_DIR }}/ti-cgt-c7000_4.1.0.LTS'
  CGT_TI_ARM_CLANG_PATH: '{{ .TI_INSTALL_DIR }}/ti-cgt-armllvm_3.2.2.LTS'

tasks:

  default:
    silent: true
    cmds:
      - task --list-all --summary
      - echo
      - echo "Environment:"
      - echo "  MACHINE        = ${MACHINE}"
      - echo "  DISTRO_BASE    = ${DISTRO_BASE}"
      - echo "  DISTRO_SUITE   = ${DISTRO_SUITE}"
      - echo "  DISTRO_TYPE    = ${DISTRO_TYPE}"
      - echo "  PROJECT        = ${PROJECT}"
      - echo "  CROSS_COMPILE  = ${CROSS_COMPILE}"
      - echo
      - echo "TI Environment:"
      - echo "  PROFILE        = ${PROFILE}"
      - echo "  RUN_TI_TARGET  = ${RUN_TI_TARGET}"
      - echo "  RUN_TI_COMMAND = ${RUN_TI_COMMAND}"
      - echo

  wget:
    internal: true
    cmds:
      - mkdir -p $(dirname {{ .PATH }})
      - wget --no-clobber --continue --quiet --show-progress -O {{ .PATH }} {{ .URL }} || true
    requires:
      vars: [ URL, PATH ]

  fetch:
    silent: true
    cmds:
      - rm -rf '{{ .TOOLCHAINS_DIR }}'
      - mkdir -p '{{ .TOOLCHAINS_DIR }}'
      - task: wget
        vars:
          URL: '{{ get .URLS "toolchains" }}'
          PATH: '{{ .DOWNLOAD_DIR }}/t3gemstone-toolchains-${DISTRO_BASE}-${DISTRO_SUITE}.tar.gz'
      - tar xf '{{ .DOWNLOAD_DIR }}/t3gemstone-toolchains-${DISTRO_BASE}-${DISTRO_SUITE}.tar.gz' --directory "{{ .TOOLCHAINS_DIR }}"
    status:
      - test -f '{{ .DOWNLOAD_DIR }}/t3gemstone-toolchains-ubuntu-jammy.tar.gz'

  fetch-ti:
    silent: true
    cmds:
      - rm -rf '{{ .TI_INSTALL_DIR }}'
      - mkdir -p '{{ .TI_INSTALL_DIR }}'
      - task: wget
        vars:
          URL: '{{ get .URLS "ti_j722s_rtos_sdk" }}'
          PATH: '{{ .DOWNLOAD_DIR }}/ti-j722s-rtos-sdk.tar.gz'
      - tar xf '{{ .DOWNLOAD_DIR }}/ti-j722s-rtos-sdk.tar.gz' --directory "{{ .TI_INSTALL_DIR }}"
      - task: wget
        vars:
          URL: '{{ get .URLS "ti_j722s_mcusw_sdk" }}'
          PATH: '{{ .DOWNLOAD_DIR }}/mcusw-j722s.zip'
      - unzip -q '{{ .DOWNLOAD_DIR }}/mcusw-j722s.zip' -d "{{ .TI_INSTALL_DIR }}"
      - task: wget
        vars:
          URL: '{{ get .URLS "ti_sysconfig" }}'
          PATH: '{{ .DOWNLOAD_DIR }}/sysconfig.run'
      - chmod +x '{{ .DOWNLOAD_DIR }}/sysconfig.run'
      - '{{ .DOWNLOAD_DIR }}/sysconfig.run --mode unattended --prefix {{ .SYSCFG_PATH }}'
      - task: wget
        vars:
          URL: '{{ get .URLS "ti_cgt_c7000" }}'
          PATH: '{{ .DOWNLOAD_DIR }}/ti_cgt_c7000.bin'
      - chmod +x '{{ .DOWNLOAD_DIR }}/ti_cgt_c7000.bin'
      - '{{ .DOWNLOAD_DIR }}/ti_cgt_c7000.bin --mode unattended --prefix {{ .TI_INSTALL_DIR }}'
      - task: wget
        vars:
          URL: '{{ get .URLS "ti_cgt_armllvm" }}'
          PATH: '{{ .DOWNLOAD_DIR }}/ti_cgt_armllvm.bin'
      - chmod +x '{{ .DOWNLOAD_DIR }}/ti_cgt_armllvm.bin'
      - '{{ .DOWNLOAD_DIR }}/ti_cgt_armllvm.bin --mode unattended --prefix {{ .TI_INSTALL_DIR }}'
    status:
      - test -f '{{ .DOWNLOAD_DIR }}/ti-j722s-rtos-sdk.tar.gz'
      - test -f '{{ .DOWNLOAD_DIR }}/mcusw-j722s.zip'
      - test -f '{{ .DOWNLOAD_DIR }}/sysconfig.run'
      - test -f '{{ .DOWNLOAD_DIR }}/ti_cgt_c7000.bin'
      - test -f '{{ .DOWNLOAD_DIR }}/ti_cgt_armllvm.bin'

  run-ti:
    cmds:
      - task: fetch-ti
      - |
        if [ "${CROSS_COMPILE}" == "true" ]; then
          pushd {{ .TOOLCHAINS_DIR }} >/dev/null && source ./env && popd >/dev/null
        fi
        make -C mcu run-ti

  build:
    cmds:
      - task: fetch
      - |
        if [ "${CROSS_COMPILE}" == "true" ]; then
          pushd {{ .TOOLCHAINS_DIR }} >/dev/null && source ./env && popd >/dev/null
        fi
        make -C "${PROJECT}"

  clean:
    cmds:
      - task: fetch
      - |
        if [ "${CROSS_COMPILE}" == "true" ]; then
          pushd {{ .TOOLCHAINS_DIR }} >/dev/null && source ./env && popd >/dev/null
        fi
        make -C "${PROJECT}" clean

  destroy:
    cmds:
      - rm -rf .venv
      - rm -rf .devbox
